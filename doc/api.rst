.. SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2022 Association Prologin <info@prologin.org>

===
API
===

..
   This file was generated by stechec2-generator. DO NOT EDIT.

Constantes
==========

.. c:var:: HAUTEUR

  :Valeur: 40
  :Description:
    Nombre de lignes dans la carte
.. c:var:: LARGEUR

  :Valeur: 40
  :Description:
    Nombre de colonnes dans la carte
.. c:var:: NB_TOURS

  :Valeur: 400
  :Description:
    Nombre de tours à jouer avant la fin de la partie
.. c:var:: TAILLE_DEPART

  :Valeur: 5
  :Description:
    Taille de départ d'une troupe
.. c:var:: TAILLE_MIN

  :Valeur: 3
  :Description:
    Taille minimale qu'une troupe peut avoir avant de se disperser
.. c:var:: NB_TROUPES

  :Valeur: 2
  :Description:
    Nombre de troupes que chaque joueur controle
.. c:var:: INTERVALLE_DISTRIB

  :Valeur: 5
  :Description:
    Intervalle de distribution de pains par les papys
.. c:var:: FREQ_TUNNEL

  :Valeur: 1
  :Description:
    Nombre de tunnels qu'un joueur peut creuser par tour
.. c:var:: PTS_ACTION

  :Valeur: 20
  :Description:
    Nombre de déplacements que peut faire une troupe en un tour
.. c:var:: COUT_CROISSANCE

  :Valeur: 11
  :Description:
    Nombre de points de mouvement requis pour incrémenter la taille
.. c:var:: COUT_BUISSON

  :Valeur: 3
  :Description:
    Coût en score de la pose de buisson
.. c:var:: TOUR_FERMETURE

  :Valeur: 100
  :Description:
    Tour au moment duquel les barrières s'ouvrent ou se ferment

Énumérations
============

.. c:type:: erreur

  :Description:
      Erreurs possibles après avoir effectué une action
  :Valeurs:
      :OK:
        L'action a été effectuée avec succès
      :JOUEUR_INVALIDE:
        Mauvais numéro de joueur
      :TROUPE_INVALIDE:
        Mauvais identifiant de troupe
      :HORS_TOUR:
        Aucune action n'est possible hors de joueur_tour
      :MOUVEMENTS_INSUFFISANTS:
        Il ne reste plus assez de points de mouvements pour effectuer l'action demandée
      :TROP_GRANDI:
        La troupe a déjà trop grandi pendant le tour
      :TROP_CREUSE:
        Trop de trous ont déjà été creusés pendant le tour
      :NON_CREUSABLE:
        Il n'est pas possible de creuser à la position demandée
      :NON_CONSTRUCTIBLE:
        La zone demandée n'est pas constructible
      :SCORE_INSUFFISANT:
        Le joueur n'a pas assez de points pour construire un buisson
      :POSITION_INVALIDE:
        La position demandée est hors du parc
.. c:type:: direction

  :Description:
      Directions possibles
  :Valeurs:
      :NORD:
        Sens positif pour les lignes
      :SUD:
        Sens négatif pour les lignes
      :EST:
        Sens positif pour les colonnes
      :OUEST:
        Sens négatif pour les colonnes
      :HAUT:
        Sens positif pour le niveau
      :BAS:
        Sens négatif pour le niveau
.. c:type:: type_case

  :Description:
      Type de l'élément présent sur une case
  :Valeurs:
      :GAZON:
        Absence d'élément
      :BUISSON:
        Obstacle impossible à traverser
      :BARRIERE:
        Élément pouvant être ouvert ou fermé. Une barrière fermée est infranchissable alors qu'une barrière ouverte est analogue à une case vide
      :NID:
        Élément traversable permettant à la troupe de déposer son inventaire en échange de points
      :PAPY:
        Élément traversable générant de manière périodique des miches de pain
      :TROU:
        Interface entre le niveau principal est le niveau souterrain
      :TUNNEL:
        Bloc du souterrain ayant été creusé
      :TERRE:
        Bloc du souterrain n'ayant pas encore été creusé
.. c:type:: etat_barriere

  :Description:
      État d'une barrière, soit ouvert, soit fermé, soit non-applicable
  :Valeurs:
      :OUVERTE:
        La barrière est ouverte
      :FERMEE:
        La barrière est fermée
      :PAS_DE_BARRIERE:
        L'élément dont on requiert l'état n'est pas une barrière
.. c:type:: etat_nid

  :Description:
      Joueur auquel appartient un nid
  :Valeurs:
      :LIBRE:
        Le nid n'a pas été attribué
      :JOUEUR_0:
        Joueur 0
      :JOUEUR_1:
        Joueur 1
      :PAS_DE_NID:
        L'élément dont on requiert l'état n'est pas un nid
.. c:type:: pigeon_debug

  :Description:
      Type de pigeon de debug
  :Valeurs:
      :PAS_DE_PIGEON:
        Aucun pigeon, enlève le pigeon présent
      :PIGEON_BLEU:
        Pigeon bleu
      :PIGEON_JAUNE:
        Pigeon jaune
      :PIGEON_ROUGE:
        Pigeon rouge
.. c:type:: type_action

  :Description:
      Types d'actions
  :Valeurs:
      :ACTION_AVANCER:
        Action ``avancer``
      :ACTION_GRANDIR:
        Action ``grandir``
      :ACTION_CONSTRUIRE:
        Action ``construire buisson``
      :ACTION_CREUSER:
        Action ``creuser tunnel``

Structures
==========

.. c:type:: position

  .. code-block:: c

    struct position {
        int colonne;
        int ligne;
        int niveau;
    };

  :Description: Position dans la carte, donnée par trois coordonnées

  :Champs:
    :colonne: Abscisse
    :ligne: Ordonnée
    :niveau: Niveau
.. c:type:: troupe

  .. code-block:: c

    struct troupe {
        position maman;
        position array canards;
        int taille;
        direction dir;
        int inventaire;
        int pts_action;
        int id;
    };

  :Description: Une troupe, composée de la maman canard et de ses canetons

  :Champs:
    :maman: Position de la maman canard
    :canards: Position des différents canards de la troupe, incluant la maman en première position
    :taille: Taille de la troupe
    :dir: Direction de la troupe
    :inventaire: Nombre de pains de la troupe
    :pts_action: Nombre de points d'action de la troupe
    :id: Identifiant de la troupe
.. c:type:: etat_case

  .. code-block:: c

    struct etat_case {
        position pos;
        type_case contenu;
        bool est_constructible;
        int nb_pains;
    };

  :Description: Élément constituant le parc

  :Champs:
    :pos: Position de la case. Le niveau vaut nécessairement 0
    :contenu: Type de la case
    :est_constructible: La case est constructible
    :nb_pains: Nombre de pains contenus sur la case
.. c:type:: action_hist

  .. code-block:: c

    struct action_hist {
        type_action action_type;
        int troupe_id;
        direction action_dir;
        position action_pos;
    };

  :Description: Action représentée dans l'historique

  :Champs:
    :action_type: Type de l'action
    :troupe_id: Identifiant de la troupe
    :action_dir: Direction de l'action
    :action_pos: Position de l'action

Fonctions
=========

.. c:function:: erreur avancer(int id, direction dir)

    La troupe avance d'une case vers une direction donnée



    :param id: Identifiant de la troupe à avancer
    :param dir: Direction vers laquelle avancer

.. c:function:: erreur grandir(int id)

    La troupe grandit



    :param id: Identifiant de la troupe à faire grandir

.. c:function:: erreur construire_buisson(position pos)

    Construit un buisson à la position donnée



    :param pos: Position où construire le buisson

.. c:function:: erreur creuser_tunnel(position pos)

    Creuse un tunnel à la position donnée



    :param pos: Position de la case à creuser

.. c:function:: etat_case info_case(position pos)

    Renvoie les informations concernant une case



    :param pos: Position de la case

.. c:function:: etat_barriere info_barriere(position pos)

    Renvoie les informations d'état d'une barrière



    :param pos: Position de la barrière

.. c:function:: etat_nid info_nid(position pos)

    Renvoie les informations d'état d'un nid



    :param pos: Position du nid

.. c:function:: int papy_tours_restants(position pos)

    Renvoie le nombre de tours restants avant qu'un papy dépose une miche de pain. Retourne -1 si aucun papy ne se trouve à la position demandée



    :param pos: Position du papy

.. c:function:: troupe array troupes_joueur(int id_joueur)

    Renvoie les troupes d'un joueur. Si le joueur est invalide, tous les champs valent -1.



    :param id_joueur: Numéro du joueur concerné

.. c:function:: position array pains()

    Renvoie la position des pains récupérables




.. c:function:: erreur debug_poser_pigeon(position pos, pigeon_debug pigeon)

    Pose un pigeon de debug sur la case indiquée



    :param pos: Case où poser le pigeon
    :param pigeon: Pigeon à afficher sur la case

.. c:function:: action_hist array historique()

    Renvoie la liste des actions effectuées par l'adversaire durant son tour, dans l'ordre chronologique. Les actions de débug n'apparaissent pas dans cette liste.




.. c:function:: int gain(int nb_pains)

    Renvoie le gain en score que le nombre de pains passé en entrée rapporterait s'ils étaient tous déposés d'un coup dans un nid



    :param nb_pains: Nombre de miches de pain déposées

.. c:function:: int moi()

    Renvoie votre numéro de joueur.




.. c:function:: int adversaire()

    Renvoie le numéro du joueur adverse.




.. c:function:: int score(int id_joueur)

    Renvoie le score du joueur `id_joueur`. Renvoie -1 si le joueur est invalide.



    :param id_joueur: Numéro du joueur concerné

.. c:function:: bool annuler()

    Annule la dernière action. Renvoie faux quand il n'y a pas d'action à annuler ce tour-ci




.. c:function:: int tour_actuel()

    Retourne le numéro du tour actuel.




.. c:function:: void afficher_erreur(erreur v)

    Affiche le contenu d'une valeur de type erreur



    :param v: The value to display

.. c:function:: void afficher_direction(direction v)

    Affiche le contenu d'une valeur de type direction



    :param v: The value to display

.. c:function:: void afficher_type_case(type_case v)

    Affiche le contenu d'une valeur de type type_case



    :param v: The value to display

.. c:function:: void afficher_etat_barriere(etat_barriere v)

    Affiche le contenu d'une valeur de type etat_barriere



    :param v: The value to display

.. c:function:: void afficher_etat_nid(etat_nid v)

    Affiche le contenu d'une valeur de type etat_nid



    :param v: The value to display

.. c:function:: void afficher_pigeon_debug(pigeon_debug v)

    Affiche le contenu d'une valeur de type pigeon_debug



    :param v: The value to display

.. c:function:: void afficher_type_action(type_action v)

    Affiche le contenu d'une valeur de type type_action



    :param v: The value to display

.. c:function:: void afficher_position(position v)

    Affiche le contenu d'une valeur de type position



    :param v: The value to display

.. c:function:: void afficher_troupe(troupe v)

    Affiche le contenu d'une valeur de type troupe



    :param v: The value to display

.. c:function:: void afficher_etat_case(etat_case v)

    Affiche le contenu d'une valeur de type etat_case



    :param v: The value to display

.. c:function:: void afficher_action_hist(action_hist v)

    Affiche le contenu d'une valeur de type action_hist



    :param v: The value to display


Fonctions utilisateur
=====================

.. c:function:: void partie_init()

    Fonction appelée au début de la partie.


.. c:function:: void jouer_tour()

    Fonction appelée à chaque tour.


.. c:function:: void partie_fin()

    Fonction appelée à la fin de la partie.


