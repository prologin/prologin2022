# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (c) 2022 Association Prologin <association@prologin.org>

name: prologin2022
rules_type: turnbased
player_count: 2

constant:
  -
    cst_name: HAUTEUR
    cst_val: 80
    cst_comment: Nombre de lignes dans la carte
  -
    cst_name: LARGEUR
    cst_val: 80
    cst_comment: Nombre de colonnes dans la carte
  -
    cst_name: NB_TOURS
    cst_val: 400
    cst_comment: Nombre de tours à jouer avant la fin de la partie
  -
    cst_name: TAILLE_DEPART
    cst_val: 5
    cst_comment: Taille de départ d'une troupe
  -
    cst_name: TAILLE_MIN
    cst_val: 3
    cst_comment: Taille minimale qu'une troupe peut avoir avant de se disperser
  -
    cst_name: NB_TROUPES
    cst_val: 2
    cst_comment: Nombre de troupes que chaque joueur controle
  -
    cst_name: INTERVALLE_DISTRIB
    cst_val: 4
    cst_comment: Intervalle de distribution de pains par les papys
  -
    cst_name: FREQ_TUNNEL
    cst_val: 1
    cst_comment: Nombre de tunnels qu'un joueur peut creuser par tour
  -
    cst_name: PTS_MOUVEMENTS
    cst_val: 20
    cst_comment: Nombre de déplacements que peut faire une troupe en un tour
  -
    cst_name: COUT_CROISSANCE
    cst_val: 10
    cst_comment: Nombre de points de mouvement requis pour incrémenter la taille
  -
    cst_name: COUT_BUISSON
    cst_val: 3
    cst_comment: Coût en pains de la pose de buisson
  -
    cst_name: TOUR_FERMETURE
    cst_val: 100
    cst_comment: Tour au moment duquel les barrières s'ouvrent ou se ferment

enum:
  - enum_name: erreur
    enum_summary: "Erreurs possibles après avoir effectué une action"
    enum_field:
      - [ok, "L'action a été effectuée avec succès"]
      - [hors_tour, "Aucune action n'est possible hors de joueur_tour"]
      - [mouvements_insuffisants, "Il ne reste plus assez de points de
                                  mouvements pour effectuer l'action demandée"]
      - [trop_grandi, "La troupe a déjà trop grandi pendant le tour"]
      - [trop_creuse, "Trop de trous ont déjà été creusés pendant le tour"]
      - [non_creusable, "Il n'est pas possible de creuser à la position demandée"]
      - [non_constructible, "La zone demandée n'est pas constructible"]
      - [pains_insuffisants, "La troupe n'a pas assez de pains pour construire
                              un buisson"]
      - [position_invalide, "La position demandée est hors du parc"]
  -
    enum_name: direction
    enum_summary: "Directions possibles"
    enum_field:
      - [nord, "Sens positif pour les lignes"]
      - [sud, "Sens négatif pour les lignes"]
      - [est, "Sens positif pour les colonnes"]
      - [ouest, "Sens négatif pour les colonnes"]
      - [haut, "Sens positif pour le niveau"]
      - [bas, "Sens négatif pour le niveau"]
  -
    enum_name: type_case
    enum_summary: "Type de l'élément présent sur une case"
    enum_field:
      - [vide, "Absence d'élément"]
      - [buisson, "Obstacle impossible à traverser"]
      - [barriere, "Élément pouvant être ouvert ou fermé. Une barrière fermée
                    est infranchissable alors qu'une barrière ouverte est
                    analogue à une case vide"]
      - [nid, "Élément traversable permettant à la troupe de déposer son
               inventaire en échange de points"]
      - [papy, "Élément traversable générant de manière périodique des miches
                de pain"]
      - [trou, "Interface entre le niveau principal est le niveau souterrain"]
      - [tunnel, "Bloc du souterrain ayant été creusé"]
      - [terre, "Bloc du souterrain n'ayant pas encore été creusé"]
  -
    enum_name: etat_barriere
    enum_summary: "État d'une barrière, soit ouvert, soit fermé, soit
                   non-applicable"
    enum_field:
      - [ouverte, "La barrière est ouverte"]
      - [fermee, "La barrière est fermée"]
      - [pas_de_barriere, "L'élément dont on requiert l'état n'est pas une
                            barrière"]
  -
    enum_name: etat_nid
    enum_summary: "Joueur auquel appartient un nid"
    enum_field:
      - [libre, "Le nid n'a pas été attribué"]
      - [joueur_0, "Joueur 0"]
      - [joueur_1, "Joueur 1"]
      - [pas_de_nid, "L'élément dont on requiert l'état n'est pas un nid"]
  -
    enum_name: pigeon_debug
    enum_summary: "Type de pigeon de debug"
    enum_field:
      - [aucun_pigeon, "Aucun pigeon, enlève le pigeon présent"]
      - [pigeon_bleu, "Pigeon bleu"]
      - [pigeon_jaune, "Pigeon jaune"]
      - [pigeon_rouge, "Pigeon rouge"]
  -
    enum_name: type_action
    enum_summary: "Types d'actions"
    enum_field:
      - [action_avancer, "Action ``avancer``"]
      - [action_grandir, "Action ``grandir``"]
      - [action_construire, "Action ``construire buisson``"]
      - [action_creuser, "Action ``creuser tunnel``"]

struct:
  -
    str_name: position
    str_summary: Position dans la carte, donnée par trois coordonnées
    str_tuple: yes
    str_field:
      - [colonne, int, "Abscisse"]
      - [ligne, int, "Ordonnée"]
      - [niveau, int, "Niveau"]
  -
    str_name: troupe
    str_summary: Une troupe, composée de la maman canard et de ses canetons
    str_tuple: no
    str_field:
      - [maman, position, "Position de la maman canard"]
      - [canards, position array, "Position des différents canards de la troupe,
                                   incluant la maman en première position"]
      - [taille, int, "Taille de la troupe"]
      - [dir, direction, "Direction de la troupe"]
      - [id, int, "Identifiant de la troupe"]
  -
    str_name: etat_case
    str_summary: Élément constituant le parc
    str_tuple: no
    str_field:
      - [pos, position, "Position de la case. Le niveau vaut nécessairement 0"]
      - [contenu, type_case, "Type de la case"]
      - [est_constructible, bool, "La case est constructible"]
      - [contient_pain, bool, "La case contient une miche de pain"]
  -
    str_name: action_hist
    str_summary: Action représentée dans l'historique
    str_tuple: no
    str_field:
      - [action_type, type_action, "Type de l'action"]
      - [id, int, "Identifiant de la troupe"]
      - [dir, direction, "Direction de l'action"]
      - [pos, position, "Position de l'action"]


function:
# Actions
  -
    fct_name: avancer
    fct_summary: La troupe avance d'une case vers une direction donnée
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [id, int, "Identifiant de la troupe à avancer"]
      - [dir, direction, "Direction vers laquelle avancer"]
  -
    fct_name: grandir
    fct_summary: La troupe grandit
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [id, int, "Identifiant de la troupe à faire grandir"]
  -
    fct_name: construire_buisson
    fct_summary: Construit un buisson à la position donnée
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [pos, position, "Position où construire le buisson"]
  -
    fct_name: creuser_tunnel
    fct_summary: Creuse un tunnel à la position donnée
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [pos, position, "Position de la case à creuser"]

# Fonctions de requête de l'état du jeu
  -
    fct_name: info_case
    fct_summary: Renvoie les informations concernant une case
    fct_ret_type: etat_case
    fct_arg:
      - [pos, position, "Position de la case"]
  -
    fct_name: info_barriere
    fct_summary: Renvoie les informations d'état d'une barrière
    fct_ret_type: etat_barriere
    fct_arg:
      - [pos, position, "Position de la barrière"]
  -
    fct_name: info_nid
    fct_summary: Renvoie les informations d'état d'un nid
    fct_ret_type: etat_nid
    fct_arg:
      - [pos, position, "Position du nid"]
  -
    fct_name: papy_tours_restants
    fct_summary: Renvoie le nombre de tours restants avant qu'un papy dépose une
                 miche de pain. Retourne -1 si aucun papy ne se trouve à la
                 position demandée
    fct_ret_type: int
    fct_arg:
      - [pos, position, "Position du papy"]
  -
    fct_name: troupes_joueur
    fct_summary: Renvoie les troupes d'un joueur.
                 Si le joueur est invalide, tous les champs valent -1.
    fct_ret_type: troupe array
    fct_arg: 
      - [id_joueur, int, "Numéro du joueur concerné"]
  -
    fct_name: pains
    fct_summary: Renvoie la position des pains récupérables
    fct_ret_type: position array
    fct_arg: []

# Debug
  -
    fct_name: debug_poser_pigeon
    fct_summary: Pose un pigeon de debug sur la case indiquée
    fct_ret_type: pigeon_debug
    fct_action: yes
    fct_arg:
      - [pos, position, "Case où poser le pigeon"]
      - [pigeon, pigeon_debug, "Pigeon à afficher sur la case"]

# Historique
  - 
    fct_name: historique
    fct_summary: Renvoie la liste des actions effectuées par l'adversaire
                 durant son tour, dans l'ordre chronologique. Les actions de
                 débug n'apparaissent pas dans cette liste.
    fct_ret_type: action_hist array
    fct_arg: []

# Utilitaire
  -
    fct_name: gain
    fct_summary: Renvoie le gain en score que le nombre de pains passé en entrée
                 rapporterait s'ils étaient tous déposés d'un coup dans un nid
    fct_ret_type: int
    fct_arg:
      - [nb_pains, int, "Nombre de miches de pain déposées"]
# Autres
  -
    fct_name: moi
    fct_summary: Renvoie votre numéro de joueur.
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: adversaire
    fct_summary: Renvoie le numéro du joueur adverse.
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: score
    fct_summary: Renvoie le score du joueur `id_joueur`.
                 Renvoie -1 si le joueur est invalide.
    fct_ret_type: int
    fct_arg:
      - [id_joueur, int, "Numéro du joueur concerné"]
  -
    fct_name: annuler
    fct_summary: Annule la dernière action.
                 Renvoie faux quand il n'y a pas d'action à annuler ce tour-ci
    fct_ret_type: bool
    fct_arg: []
  -
    fct_name: tour_actuel
    fct_summary: Retourne le numéro du tour actuel.
    fct_ret_type: int
    fct_arg: []

user_function:
  -
    fct_name: partie_init
    fct_summary: Fonction appelée au début de la partie.
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: jouer_tour
    fct_summary: Fonction appelée à chaque tour.
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: partie_fin
    fct_summary: Fonction appelée à la fin de la partie.
    fct_ret_type: void
    fct_arg: []
